<?xml version="1.0"?>
<launch>
    <env name="GAZEBO_RESOURCE_PATH" value="$(find rrt_exploration_tutorials)/launch/includes/meshes"/>
    
    <arg name="model_1" default="$(find qingzhou_description)/urdf/qingzhou.urdf.xacro"/>
    <arg name="model_2" default="$(find qingzhou_description)/urdf/qingzhou_2.urdf.xacro"/>
    <arg name="model_3" default="$(find qingzhou_description)/urdf/qingzhou_3.urdf.xacro"/>
    <arg name="model_4" default="$(find qingzhou_description)/urdf/qingzhou_4.urdf.xacro"/>
    <arg name="world_name" value="$(find qingzhou_gazebo)/worlds/real_final.world" />
    <arg name="cmd_timeout" default="0.5"/>

    <arg name="namespace_1" default="/robot_1" />
    <arg name="robot_name_1" value="robot_1"/>
    <arg name="x_robot1" default="0.0"/>
    <arg name="y_robot1" default="12.0"/>
    <arg name="z_robot1" default="0.0" />
    <arg name="roll_robot1" default="0.0"/>
    <arg name="pitch_robot1" default="0.0"/>
    <arg name="yaw_robot1" default="1.57"/>

    <arg name="namespace_2" default="/robot_2" />
    <arg name="robot_name_2" value="robot_2"/>
    <arg name="x_robot2" default="2.0"/>
    <arg name="y_robot2" default="12.0"/>
    <arg name="z_robot2" default="0.0" />
    <arg name="roll_robot2" default="0.0"/>
    <arg name="pitch_robot2" default="0.0"/>
    <arg name="yaw_robot2" default="1.57"/>

    <arg name="namespace_3" default="/robot_3" />
    <arg name="robot_name_3" value="robot_3"/>
    <arg name="x_robot3" default="4.0"/>
    <arg name="y_robot3" default="12.0"/>
    <arg name="z_robot3" default="0.0" />
    <arg name="roll_robot3" default="0.0"/>
    <arg name="pitch_robot3" default="0.0"/>
    <arg name="yaw_robot3" default="1.57"/>

    <arg name="namespace_4" default="/robot_4" />
    <arg name="robot_name_4" value="robot_4"/>
    <arg name="x_robot4" default="6.0"/>
    <arg name="y_robot4" default="12.0"/>
    <arg name="z_robot4" default="0.0" />
    <arg name="roll_robot4" default="0.0"/>
    <arg name="pitch_robot4" default="0.0"/>
    <arg name="yaw_robot4" default="1.57"/>


     <!-- Gazebo  -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" default="$(arg world_name)"/>
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="true"/>
        <arg name="headless" value="false"/>
        <arg name="debug" value="false"/>
    </include>


    <group ns="$(arg namespace_1)">

        <!-- Launch the move_base node -->
        <include file="$(find rrt_exploration_tutorials)/launch/includes/move_baseSafe.launch">
            <arg name="namespace" value="robot_1"/>
        </include>

        <!-- Gazebo  -->
        <!-- <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" default="$(arg world_name)"/>
        </include> -->

        <!-- Load the robot description -->
        <param name="robot_description" command="$(find xacro)/xacro $(arg model_1)"/>

        <!-- Load ros_controllers configuration parameters -->
        <rosparam file="$(find qingzhou_control)/config/ctrl_ackermann_steering_controller.yaml" command="load" ns="$(arg namespace_1)" />
        <rosparam file="$(find qingzhou_control)/config/ctrl_gains.yaml" command="load" ns="$(arg namespace_1)" />
        <rosparam file="$(find qingzhou_control)/config/ctrl_joint_state_publisher.yaml" command="load" ns="$(arg namespace_1)" />
        <rosparam file="$(find qingzhou_control)/config/ctrl_qingzhou_hardware_gazebo.yaml" command="load" ns="$(arg namespace_1)" />

        <!-- Spawn the controllers -->
        <node pkg="controller_manager" type="spawner" name="controller_spawner" ns="$(arg namespace_1)"
            args="joint_state_publisher ackermann_steering_controller"
            output="screen" respawn="false" />

        <!-- Launch  the robot state publisher -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
            <param name="publish_frequency" value="50.0"/>
            <param name="tf_prefix" type="string" value="$(arg robot_name_1)"/>
        </node>

        <!-- Launch a rqt steering GUI for publishing to /qingzhou/steer_drive_controller/cmd_vel -->
        <!-- <node pkg="rqt_robot_steering" type="rqt_robot_steering" name="rqt_robot_steering" >
            <param name="default_topic" value="$(arg namespace)/ackermann_steering_controller/cmd_vel"/>
        </node> -->

        <!-- Spawn robot in Gazebo -->
        <node name="spawn_vehicle" pkg="gazebo_ros" type="spawn_model"
            args="-urdf -param robot_description -model $(arg robot_name_1)
                -x $(arg x_robot1) -y $(arg y_robot1) -z $(arg z_robot1)
                -R $(arg roll_robot1) -P $(arg pitch_robot1) -Y $(arg yaw_robot1)"
            respawn="false" output="screen" />

    <node pkg="tf" type="static_transform_publisher" name="ydlidar_link_to_laser" args="0.0 0.0 0.0 0.0 0 0  robot_1/ydlidar_link /qingzhou_1/ydlidar_link  20" />
    <node pkg="tf" type="static_transform_publisher" name="camera_link_to_bot" args="0.0 0.0 0.0 3.14 0  0    robot_1/camera_link  qingzhou_1/  20" />

    <node pkg="qingzhou_description" type="gazebo_odometry.py" name="gazebo_odometry_robot1" />
    </group>

    


    <group ns="$(arg namespace_2)">

        <!-- Launch the move_base node -->
        <include file="$(find rrt_exploration_tutorials)/launch/includes/move_baseSafe.launch">
            <arg name="namespace" value="robot_2"/>
        </include>

        <!-- Gazebo  -->
        <!-- <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" default="$(arg world_name)"/>
        </include> -->

        <!-- Load the robot description -->
        <param name="robot_description" command="$(find xacro)/xacro $(arg model_2)"/>

        <!-- Load ros_controllers configuration parameters -->
        <rosparam file="$(find qingzhou_control)/config/ctrl_ackermann_steering_controller.yaml" command="load" ns="$(arg namespace_2)" />
        <rosparam file="$(find qingzhou_control)/config/ctrl_gains.yaml" command="load" ns="$(arg namespace_2)" />
        <rosparam file="$(find qingzhou_control)/config/ctrl_joint_state_publisher.yaml" command="load" ns="$(arg namespace_2)" />
        <rosparam file="$(find qingzhou_control)/config/ctrl_qingzhou_hardware_gazebo.yaml" command="load" ns="$(arg namespace_2)" />

        <!-- Spawn the controllers -->
        <node pkg="controller_manager" type="spawner" name="controller_spawner" ns="$(arg namespace_2)"
            args="joint_state_publisher ackermann_steering_controller"
            output="screen" respawn="false" />

        <!-- Launch  the robot state publisher -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
            <param name="publish_frequency" value="50.0"/>
            <param name="tf_prefix" type="string" value="$(arg robot_name_2)"/>
        </node>

        <!-- Launch a rqt steering GUI for publishing to /qingzhou/steer_drive_controller/cmd_vel -->
        <!-- <node pkg="rqt_robot_steering" type="rqt_robot_steering" name="rqt_robot_steering" >
            <param name="default_topic" value="$(arg namespace)/ackermann_steering_controller/cmd_vel"/>
        </node> -->

        <!-- Spawn robot in Gazebo -->
        <node name="spawn_$(arg robot_name_2)" pkg="gazebo_ros" type="spawn_model"
            args="-urdf -param robot_description -model $(arg robot_name_2)
                -x $(arg x_robot2) -y $(arg y_robot2) -z $(arg z_robot2)
                -R $(arg roll_robot2) -P $(arg pitch_robot2) -Y $(arg yaw_robot2)"
            respawn="false" output="screen" />

    <node pkg="tf" type="static_transform_publisher" name="ydlidar_link_to_laser" args="0.0 0.0 0.0 0.0 0 0  robot_2/ydlidar_link /qingzhou_2/ydlidar_link  20" />
    <node pkg="tf" type="static_transform_publisher" name="camera_link_to_bot" args="0.0 0.0 0.0 3.14 0  0    robot_2/camera_link  qingzhou_2/  20" />

    <node pkg="qingzhou_description" type="gazebo_odometry_2.py" name="gazebo_odometry_robot2" />
    </group>



     <group ns="$(arg namespace_3)">

        <!-- Launch the move_base node -->
        <include file="$(find rrt_exploration_tutorials)/launch/includes/move_baseSafe.launch">
            <arg name="namespace" value="robot_3"/>
        </include>

        <!-- Gazebo  -->
        <!-- <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" default="$(arg world_name)"/>
        </include> -->

        <!-- Load the robot description -->
        <param name="robot_description" command="$(find xacro)/xacro $(arg model_3)"/>

        <!-- Load ros_controllers configuration parameters -->
        <rosparam file="$(find qingzhou_control)/config/ctrl_ackermann_steering_controller.yaml" command="load" ns="$(arg namespace_3)" />
        <rosparam file="$(find qingzhou_control)/config/ctrl_gains.yaml" command="load" ns="$(arg namespace_3)" />
        <rosparam file="$(find qingzhou_control)/config/ctrl_joint_state_publisher.yaml" command="load" ns="$(arg namespace_3)" />
        <rosparam file="$(find qingzhou_control)/config/ctrl_qingzhou_hardware_gazebo.yaml" command="load" ns="$(arg namespace_3)" />

        <!-- Spawn the controllers -->
        <node pkg="controller_manager" type="spawner" name="controller_spawner" ns="$(arg namespace_3)"
            args="joint_state_publisher ackermann_steering_controller"
            output="screen" respawn="false" />

        <!-- Launch  the robot state publisher -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
            <param name="publish_frequency" value="50.0"/>
            <param name="tf_prefix" type="string" value="$(arg robot_name_3)"/>
        </node>

        <!-- Launch a rqt steering GUI for publishing to /qingzhou/steer_drive_controller/cmd_vel -->
        <!-- <node pkg="rqt_robot_steering" type="rqt_robot_steering" name="rqt_robot_steering" >
            <param name="default_topic" value="$(arg namespace)/ackermann_steering_controller/cmd_vel"/>
        </node> -->

        <!-- Spawn robot in Gazebo -->
        <node name="spawn_$(arg robot_name_3)" pkg="gazebo_ros" type="spawn_model"
            args="-urdf -param robot_description -model $(arg robot_name_3)
                -x $(arg x_robot3) -y $(arg y_robot3) -z $(arg z_robot3)
                -R $(arg roll_robot3) -P $(arg pitch_robot3) -Y $(arg yaw_robot3)"
            respawn="false" output="screen" />

    <node pkg="tf" type="static_transform_publisher" name="ydlidar_link_to_laser" args="0.0 0.0 0.0 0.0 0 0  robot_3/ydlidar_link /qingzhou_3/ydlidar_link  20" />
    <node pkg="tf" type="static_transform_publisher" name="camera_link_to_bot" args="0.0 0.0 0.0 3.14 0  0    robot_3/camera_link  qingzhou_3/  20" />

    <node pkg="qingzhou_description" type="gazebo_odometry_3.py" name="gazebo_odometry_robot3" />
    </group>





    <group ns="$(arg namespace_4)">

        <!-- Launch the move_base node -->
        <include file="$(find rrt_exploration_tutorials)/launch/includes/move_baseSafe.launch">
            <arg name="namespace" value="robot_4"/>
        </include>

        <!-- Gazebo  -->
        <!-- <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" default="$(arg world_name)"/>
        </include> -->

        <!-- Load the robot description -->
        <param name="robot_description" command="$(find xacro)/xacro $(arg model_4)"/>

        <!-- Load ros_controllers configuration parameters -->
        <rosparam file="$(find qingzhou_control)/config/ctrl_ackermann_steering_controller.yaml" command="load" ns="$(arg namespace_4)" />
        <rosparam file="$(find qingzhou_control)/config/ctrl_gains.yaml" command="load" ns="$(arg namespace_4)" />
        <rosparam file="$(find qingzhou_control)/config/ctrl_joint_state_publisher.yaml" command="load" ns="$(arg namespace_4)" />
        <rosparam file="$(find qingzhou_control)/config/ctrl_qingzhou_hardware_gazebo.yaml" command="load" ns="$(arg namespace_4)" />

        <!-- Spawn the controllers -->
        <node pkg="controller_manager" type="spawner" name="controller_spawner" ns="$(arg namespace_4)"
            args="joint_state_publisher ackermann_steering_controller"
            output="screen" respawn="false" />

        <!-- Launch  the robot state publisher -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
            <param name="publish_frequency" value="50.0"/>
            <param name="tf_prefix" type="string" value="$(arg robot_name_4)"/>
        </node>

        <!-- Launch a rqt steering GUI for publishing to /qingzhou/steer_drive_controller/cmd_vel -->
        <!-- <node pkg="rqt_robot_steering" type="rqt_robot_steering" name="rqt_robot_steering" >
            <param name="default_topic" value="$(arg namespace)/ackermann_steering_controller/cmd_vel"/>
        </node> -->

        <!-- Spawn robot in Gazebo -->
        <node name="spawn_$(arg robot_name_4)" pkg="gazebo_ros" type="spawn_model"
            args="-urdf -param robot_description -model $(arg robot_name_4)
                -x $(arg x_robot4) -y $(arg y_robot4) -z $(arg z_robot4)
                -R $(arg roll_robot4) -P $(arg pitch_robot4) -Y $(arg yaw_robot4)"
            respawn="false" output="screen" />

    <node pkg="tf" type="static_transform_publisher" name="ydlidar_link_to_laser" args="0.0 0.0 0.0 0.0 0 0  robot_4/ydlidar_link /qingzhou_4/ydlidar_link  20" />
    <node pkg="tf" type="static_transform_publisher" name="camera_link_to_bot" args="0.0 0.0 0.0 3.14 0  0    robot_4/camera_link  qingzhou_4/  20" />

    <node pkg="qingzhou_description" type="gazebo_odometry_4.py" name="gazebo_odometry_robot4" />
    </group>


    <!-- transformation between robots (x y z yaw pitch roll)   frame_id  child_frame_id-->
    <!-- <node pkg="tf" type="static_transform_publisher" name="robot2_to_robot1" args="0.0 0 0 0 0 0 robot_1/map robot_2/map 100" /> -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="robot3_to_robot1" args="0.0 0 0 0 0 0 robot_1/map robot_3/map 100" /> -->
    <node pkg="tf" type="static_transform_publisher" name="world_to_robot_1_tf_broadcaster"  args="0 0 0 0 0 0 merge/map /robot_1/map 100"/>
    <node pkg="tf" type="static_transform_publisher" name="world_to_robot_2_tf_broadcaster" args="0.0 0 0 0 0 0 merge/map /robot_2/map 100"/>
    <node pkg="tf" type="static_transform_publisher" name="world_to_robot_3_tf_broadcaster" args="0.0 0 0 0 0 0 merge/map /robot_3/map 100"/>
    <node pkg="tf" type="static_transform_publisher" name="world_to_robot_4_tf_broadcaster" args="0.0 0 0 0 0 0 merge/map /robot_4/map 100"/>

    <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="static_transform_publisher" args="0 0 0 -1.57 0 -1.57 /support /support_depth" /> -->

    <!-- Map megring (know inital position case)-->
    <!-- <include file="$(find rrt_exploration_tutorials)/launch/includes/initposes.launch"/> -->
    <include file="$(find rrt_exploration_tutorials)/launch/includes/map_merge.launch"/>


    <!-- <include file="$(find rrt_exploration_tutorials)/launch/includes/initposes.launch"/> -->


    <!-- run RViz node (visualization) -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find rrt_exploration_tutorials)/launch/includes/rviz_config/four_new.rviz">
        <remap from="move_base_simple/goal" to="robot_1/move_base_simple/goal"/>
    </node>

</launch>