<?xml version="1.0"?>
<launch>
    <env name="GAZEBO_RESOURCE_PATH" value="$(find rrt_exploration_tutorials)/launch/includes/meshes"/>
    
    <arg name="model" default="$(find qingzhou_description)/urdf/qingzhou.urdf.xacro"/>
    <arg name="namespace" default="/robot_1" />
    <arg name="robot_name" value="robot_1"/>
    <arg name="world_name" value="$(find qingzhou_gazebo)/worlds/playground.world" />
    <arg name="cmd_timeout" default="0.5"/>
    <arg name="x" default="0.0"/>
    <arg name="y" default="0.0"/>
    <arg name="z" default="1.0" />
    <arg name="roll" default="0.0"/>
    <arg name="pitch" default="0.0"/>
    <arg name="yaw" default="0.0"/>

    <group ns="$(arg namespace)">

        <!-- Launch the move_base node -->
        <include file="$(find rrt_exploration_tutorials)/launch/includes/move_baseSafe.launch">
            <arg name="namespace" value="robot_1"/>
        </include>

        <!-- Gazebo  -->
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" default="$(arg world_name)"/>
        </include>

        <!-- Load the robot description -->
        <param name="robot_description" command="$(find xacro)/xacro $(arg model)"/>

        <!-- Load ros_controllers configuration parameters -->
        <rosparam file="$(find qingzhou_control)/config/ctrl_ackermann_steering_controller.yaml" command="load" ns="$(arg namespace)" />
        <rosparam file="$(find qingzhou_control)/config/ctrl_gains.yaml" command="load" ns="$(arg namespace)" />
        <rosparam file="$(find qingzhou_control)/config/ctrl_joint_state_publisher.yaml" command="load" ns="$(arg namespace)" />
        <rosparam file="$(find qingzhou_control)/config/ctrl_qingzhou_hardware_gazebo.yaml" command="load" ns="$(arg namespace)" />

        <!-- Spawn the controllers -->
        <node pkg="controller_manager" type="spawner" name="controller_spawner" ns="$(arg namespace)"
            args="joint_state_publisher ackermann_steering_controller"
            output="screen" respawn="false" />

        <!-- Launch  the robot state publisher -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
            <param name="publish_frequency" value="50.0"/>
            <param name="tf_prefix" type="string" value="$(arg robot_name)"/>
        </node>

        <!-- Launch a rqt steering GUI for publishing to /qingzhou/steer_drive_controller/cmd_vel -->
        <!-- <node pkg="rqt_robot_steering" type="rqt_robot_steering" name="rqt_robot_steering" >
            <param name="default_topic" value="$(arg namespace)/ackermann_steering_controller/cmd_vel"/>
        </node> -->

        <!-- Spawn robot in Gazebo -->
        <node name="spawn_vehicle" pkg="gazebo_ros" type="spawn_model"
            args="-urdf -param robot_description -model qingzhou
                -x $(arg x) -y $(arg y) -z $(arg z)
                -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"
            respawn="false" output="screen" />

    <node pkg="tf" type="static_transform_publisher" name="ydlidar_link_to_laser" args="0.0 0.0 0.0 0.0 0 0  robot_1/ydlidar_link /qingzhou/ydlidar_link  20" />
    <node pkg="tf" type="static_transform_publisher" name="camera_link_to_bot" args="0.0 0.0 0.0 3.14 0  0    robot_1/camera_link  qingzhou/  20" />

    <node pkg="qingzhou_description" type="gazebo_odometry.py" name="gazebo_odometry" />
    </group>

    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find rrt_exploration_tutorials)/launch/includes/rviz_config/single.rviz">
        <remap from="move_base_simple/goal" to="robot_1/move_base_simple/goal"/>
    </node>

</launch>